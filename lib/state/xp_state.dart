// lib/state/xp_state.dart
import 'points_state.dart';

class XpState {
  static final XpState _i = XpState._internal();
  factory XpState() => _i;
  XpState._internal();

  // ===== ÏÑ§Ï†ïÍ∞í(ÏûêÏú† Ï°∞Ï†ï) =====
  static const int xpMissionVerify = 50; // ÎØ∏ÏÖò Ïù∏Ï¶ù
  static const int xpMeetupVerify = 50; // Î™®ÏûÑ Ïù∏Ï¶ù
  static const int xpCheckInBase = 10; // Ï∂úÏÑù Í∏∞Î≥∏
  static const int xpCheckIn3 = 30; // 3Ïùº Ïó∞ÏÜç Î≥¥ÎÑàÏä§
  static const int xpCheckIn7 = 70; // 7Ïùº Ïó∞ÏÜç Î≥¥ÎÑàÏä§
  static const int xpFirstBonus = 100; // Ï≤´ Ï∞∏Í∞Ä Î≥¥ÎÑàÏä§
  static const int xpStepForPts = 50; // XP 50 Îã®ÏúÑÎßàÎã§
  static const int ptsPerXpStep = 300; // ‚Üí 300P ÏßÄÍ∏â

  int _xp = 0;
  int get xp => _xp;

  // Ïù¥ÎØ∏ ÏßÄÍ∏âÎêú "50XP Ïä§ÌÖù" Ïàò (Ïòà: 0~49=0, 50~99=1, 100~149=2 ‚Ä¶)
  int _awardedSteps = 0;

  // Î†àÎ≤® Í≥ÑÏÇ∞: ÌïÑÏöî XP = 100 * n^2
  int get level {
    int n = 1;
    while (_xp >= _needFor(n + 1)) {
      n++;
    }
    return n;
  }

  int _needFor(int n) => 100 * n * n;
  int get currentLevelNeed => _needFor(level);
  int get nextLevelNeed => _needFor(level + 1);

  double get progress {
    final denom = (nextLevelNeed - currentLevelNeed);
    if (denom <= 0) return 1;
    final v = (_xp - currentLevelNeed) / denom;
    return v.clamp(0.0, 1.0);
  }

  // Ï∂úÏÑù Ï≤¥ÌÅ¨ ÏÉÅÌÉú
  DateTime? lastCheckIn; // ÎßàÏßÄÎßâ Ï∂úÏÑù ÎÇ†Ïßú
  int streak = 0; // Ïó∞ÏÜç Ï∂úÏÑù ÏùºÏàò

  // Ï≤´ Ï∞∏Í∞Ä Î≥¥ÎÑàÏä§ Ï§ëÎ≥µ Î∞©ÏßÄ
  final Set<String> _firstMission = {}; // missionId
  final Set<String> _firstMeetup = {}; // meetupId

  // Îì±Í∏â Ïù¥Î¶Ñ
  String get grade {
    if (level < 5) return 'ÏÉàÏãπ ÌÉêÌóòÍ∞Ä üå±';
    if (level < 10) return 'Í±∞Î¶¨Ïùò Î∞©ÎûëÏûê ü•æ';
    if (level < 20) return 'ÎèÑÏãú Ï†ïÎ≥µÏûê üèôÔ∏è';
    if (level < 30) return 'ÎûúÎìúÎßàÏä§ÌÑ∞ üóº';
    return 'Î†àÏ†ÑÎìú ÌÉêÌóòÍ∞Ä üèÜ';
  }

  /// ÎÇ¥Î∂Ä Í≥µÏö©: XP Ï†ÅÎ¶Ω + 50XP Ïä§ÌÖù Î≥¥ÎÑàÏä§ Ìè¨Ïù∏Ìä∏ ÏûêÎèô ÏßÄÍ∏â
  int _addXp(int amount) {
    final beforeLevel = level;
    final beforeSteps = _xp ~/ xpStepForPts;

    _xp += amount;

    final afterSteps = _xp ~/ xpStepForPts;
    final newlyCompletedSteps = (afterSteps - beforeSteps) - _awardedSteps;
    // ÏúÑ ÏãùÏùÄ add Ïó∞ÏÜç Ìò∏Ï∂ú Ïãú Ï§ëÎ≥µ Î∞©ÏßÄÏö©. Îçî Îã®ÏàúÌûà: (afterSteps - _awardedSteps) ÎèÑ OK.
    final stepsToGrant = (afterSteps - _awardedSteps);
    if (stepsToGrant > 0) {
      PointsState().add(ptsPerXpStep * stepsToGrant);
      _awardedSteps += stepsToGrant;
    }

    final afterLevel = level;
    return afterLevel - beforeLevel; // Î†àÎ≤®ÏóÖ Ïàò
  }

  /// Ï∂úÏÑù Ï≤¥ÌÅ¨: Ïò§Îäò Ï§ëÎ≥µ Î∞©ÏßÄ + Í∏∞Î≥∏/Ïó∞ÏÜç Î≥¥ÎÑàÏä§ XP
  int checkIn() {
    final today = DateTime.now();
    if (lastCheckIn != null && _isSameDate(lastCheckIn!, today)) {
      return 0; // Ïù¥ÎØ∏ Ïò§Îäò Ìï®
    }

    final wasConsecutive = lastCheckIn != null &&
        today
                .difference(DateTime(
                    lastCheckIn!.year, lastCheckIn!.month, lastCheckIn!.day))
                .inDays ==
            1;

    if (wasConsecutive) {
      streak++;
    } else {
      streak = 1;
    }
    lastCheckIn = today;

    int bonus = xpCheckInBase;
    if (streak == 3) bonus += xpCheckIn3;
    if (streak == 7) bonus += xpCheckIn7;

    _addXp(bonus);
    // Ìè¨Ïù∏Ìä∏ÎèÑ ÎèôÏãúÏóê Ï£ºÍ≥† Ïã∂Îã§Î©¥ Ïó¨Í∏∞ÏÑú PointsState().add(...) Ï∂îÍ∞Ä Í∞ÄÎä•
    return bonus;
  }

  /// ÎØ∏ÏÖò Ïù∏Ï¶ù ÏÑ±Í≥µ Ïãú
  int onMissionVerified({required String missionId}) {
    int gained = xpMissionVerify;
    // Ï≤´ Ï∞∏Í∞Ä Î≥¥ÎÑàÏä§
    if (_firstMission.add(missionId)) {
      gained += xpFirstBonus;
    }
    return _addXp(gained);
  }

  /// Î™®ÏûÑ Ïù∏Ï¶ù ÏÑ±Í≥µ Ïãú
  int onMeetupVerified({required String meetupId}) {
    int gained = xpMeetupVerify;
    // Ï≤´ Ï∞∏Í∞Ä Î≥¥ÎÑàÏä§
    if (_firstMeetup.add(meetupId)) {
      gained += xpFirstBonus;
    }
    return _addXp(gained);
  }

  bool _isSameDate(DateTime a, DateTime b) =>
      a.year == b.year && a.month == b.month && a.day == b.day;
}
